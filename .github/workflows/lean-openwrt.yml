#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
# 
# coolsnowwolf/lede
# KFERMercer/OpenWrt
# reeuka/P3TERX-Actions-OpenWrt
#=================================================

name: Build Lean Lede

on:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - '.config'
  schedule:
    - cron: 0 7 * * 0
  watch:
    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_SH: diy.sh
  DIY_CONFIG: x86_64.config
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_IMGARTIFACT: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        ref: master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        df -h

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH lede

    - name: Update feeds
      run: cd lede && ./scripts/feeds update -a

    - name: Install feeds
      run: cd lede && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files lede/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE lede/.config
        chmod +x $DIY_SH
        cd lede
        ../$DIY_SH

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        [ -e files ] && mv files lede/files
        [ -e $DIY_CONFIG ] && mv $DIY_CONFIG lede/.config
        cd lede
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

#    - name: find config
#      run: |
#        cd lede
#        rm -rf artifact/
#        mkdir -p artifact
#        mv ./.config artifact/
        
    - name: Compile the firmware
      id: compile
      run: |
        cd lede
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: Lean_lede_bin
        path: lede/bin

    - name: Organize files
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd lede
        rm -rf bin/targets/packages
        rm -rf artifact/
        mkdir -p artifact
        mv bin/targets/* artifact/

    - name: Organize imgartifact
      if: env.UPLOAD_IMGARTIFACT == 'true' && !cancelled()
      run: |
        cd lede
        rm -rf artifact/
        mkdir -p artifact
        find bin/targets/ -name "*combined*img*" | xargs -i mv -f {} artifact/

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      with:
        name: Lean_lede
        path: lede/artifact/
